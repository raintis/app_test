/* Generated By:JJTree&JavaCC: Do not edit this line. SqlGrammar.java */
package org.jdbc4olap.parsing;

import java.io.*;
import java.util.*;

public class SqlGrammar/*@bgen(jjtree)*/implements SqlGrammarTreeConstants, SqlGrammarConstants {/*@bgen(jjtree)*/
  protected JJTSqlGrammarState jjtree = new JJTSqlGrammarState();

  final public SimpleNode QueryStatement() throws ParseException {
 /*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      SelectList();
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        jj_consume_token(K_WHERE);
        WhereClause();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
        GroupByClause();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        jj_consume_token(90);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

// SelectList ::= * | SelectItem (, SelectItem)*
  final public void SelectList() throws ParseException {
 /*@bgen(jjtree) SelectList */
  ASTSelectList jjtn000 = new ASTSelectList(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        t = jj_consume_token(91);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setText(t.image);
        break;
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        SelectItem();

        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 92:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
          jj_consume_token(92);
          SelectItem();
                     ASTSelectList jjtn001 = new ASTSelectList(JJTSELECTLIST);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
          try {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtc001 = false;

          } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
          }
        }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// SelectItem() ::= SelectStar | ColumnName() [SelectAlias]
  final public void SelectItem() throws ParseException {
 /*@bgen(jjtree) SelectItem */
  ASTSelectItem jjtn000 = new ASTSelectItem(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        SelectStar();
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;

      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          ColumnName();

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AS:
          case S_IDENTIFIER:
            SelectAlias();
                     ASTSelectAliasItem jjtn001 = new ASTSelectAliasItem(JJTSELECTALIASITEM);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
            try {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtc001 = false;

            } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
            }
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;

          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

// SelectStar() ::= OracleObjectName()".*"
  final public void SelectStar() throws ParseException {
 /*@bgen(jjtree) SelectStar */
  ASTSelectStar jjtn000 = new ASTSelectStar(JJTSELECTSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OracleObjectName();
      jj_consume_token(93);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;

    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ColumnName() throws ParseException {
 /*@bgen(jjtree) ColumnName */
  ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2147483647)) {
        TableReference();

        jj_consume_token(94);
        OracleObjectName();
                            ASTCompleteTableColumnName jjtn001 = new ASTCompleteTableColumnName(JJTCOMPLETETABLECOLUMNNAME);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
                            jjtree.closeNodeScope(jjtn001,  2);
                            jjtc001 = false;

        } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          OracleObjectName();

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 94:
            jj_consume_token(94);
            OracleObjectName();
                              ASTTableColumnName jjtn002 = new ASTTableColumnName(JJTTABLECOLUMNNAME);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
            try {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;

            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
            }
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

// SelectAlias ::= (<S_IDENTIFIER>)+
  final public void SelectAlias() throws ParseException {
 /*@bgen(jjtree) SelectAlias */
  ASTSelectAlias jjtn000 = new ASTSelectAlias(JJTSELECTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      t = jj_consume_token(S_IDENTIFIER);
                             jjtn000.setText(t.image);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void CatalogName() throws ParseException {
 /*@bgen(jjtree) CatalogName */
  ASTCatalogName jjtn000 = new ASTCatalogName(JJTCATALOGNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OracleObjectName();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SchemaName() throws ParseException {
 /*@bgen(jjtree) SchemaName */
  ASTSchemaName jjtn000 = new ASTSchemaName(JJTSCHEMANAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OracleObjectName();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TableName() throws ParseException {
 /*@bgen(jjtree) TableName */
  ASTTableName jjtn000 = new ASTTableName(JJTTABLENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OracleObjectName();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OracleObjectName() throws ParseException {
 /*@bgen(jjtree) OracleObjectName */
  ASTOracleObjectName jjtn000 = new ASTOracleObjectName(JJTORACLEOBJECTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        t = jj_consume_token(S_IDENTIFIER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setText(t.image);
        break;
      case S_QUOTED_IDENTIFIER:
        t = jj_consume_token(S_QUOTED_IDENTIFIER);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setText(t.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// FromClause ::= FromItem (, FromItem)*
  final public void FromClause() throws ParseException {
 /*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      FromItem();

      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        jj_consume_token(92);
        FromItem();
                      ASTFromClause jjtn001 = new ASTFromClause(JJTFROMCLAUSE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;

        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TableReference() throws ParseException {
 /*@bgen(jjtree) TableReference */
  ASTTableReference jjtn000 = new ASTTableReference(JJTTABLEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CatalogName();

      jj_consume_token(94);
      SchemaName();

      jj_consume_token(94);
      TableName();
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;

    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// FromItem ::= TableReference [alias]
  final public void FromItem() throws ParseException {
 /*@bgen(jjtree) FromItem */
  ASTFromItem jjtn000 = new ASTFromItem(JJTFROMITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
     ASTFromAliasItem jjtn001 = new ASTFromAliasItem(JJTFROMALIASITEM);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
        try {
          TableAlias();
        } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  2);
     }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// TableAlias ::= (<S_IDENTIFIER>)+
  final public void TableAlias() throws ParseException {
 /*@bgen(jjtree) TableAlias */
  ASTTableAlias jjtn000 = new ASTTableAlias(JJTTABLEALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
                    jjtn000.setText(t.image);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void WhereClause() throws ParseException {
 /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLRelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        jj_consume_token(K_AND);
          ASTWhereClause jjtn001 = new ASTWhereClause(JJTWHERECLAUSE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          WhereClause();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;

    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void SQLRelationalExpression() throws ParseException {
 /*@bgen(jjtree) SQLRelationalExpression */
  ASTSQLRelationalExpression jjtn000 = new ASTSQLRelationalExpression(JJTSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLSimpleExpression();

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
     ASTSQLRelOpExpr jjtn001 = new ASTSQLRelOpExpr(JJTSQLRELOPEXPR);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
        try {
          SQLRelationalOperatorExpression();
        } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  2);
     }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_3(2)) {
                     ASTSQLInExpr jjtn002 = new ASTSQLInExpr(JJTSQLINEXPR);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
          try {
            SQLInClause();
          } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
          } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                     }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void SQLRelationalOperatorExpression() throws ParseException {
 /*@bgen(jjtree) SQLRelationalOperatorExpression */
  ASTSQLRelationalOperatorExpression jjtn000 = new ASTSQLRelationalOperatorExpression(JJTSQLRELATIONALOPERATOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relop();

      SQLSimpleExpression();

     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;

    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLSimpleExpression() throws ParseException {
 /*@bgen(jjtree) SQLSimpleExpression */
  ASTSQLSimpleExpression jjtn000 = new ASTSQLSimpleExpression(JJTSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        ColumnName();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;

        break;
      case S_NUMBER:
        t = jj_consume_token(S_NUMBER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setText(t.image);
        break;
      case S_CHAR_LITERAL:
        t = jj_consume_token(S_CHAR_LITERAL);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.setText(t.image);
        break;
      case 95:
        t = jj_consume_token(95);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.setText(t.image);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Relop() throws ParseException {
 /*@bgen(jjtree) Relop */
  ASTRelop jjtn000 = new ASTRelop(JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 96:
        t = jj_consume_token(96);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setText(t.image);
        break;
      case 97:
        t = jj_consume_token(97);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setText(t.image);
        break;
      case 98:
        t = jj_consume_token(98);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setText(t.image);
        break;
      case 99:
        t = jj_consume_token(99);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setText(t.image);
        break;
      case 100:
        t = jj_consume_token(100);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setText(t.image);
        break;
      case 101:
        t = jj_consume_token(101);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setText(t.image);
        break;
      case 102:
        t = jj_consume_token(102);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setText(t.image);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLExpressionList() throws ParseException {
 /*@bgen(jjtree) SQLExpressionList */
  ASTSQLExpressionList jjtn000 = new ASTSQLExpressionList(JJTSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLSimpleExpression();

      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        jj_consume_token(92);
        SQLSimpleExpression();

      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLInClause() throws ParseException {
 /*@bgen(jjtree) SQLInClause */
  ASTSQLInClause jjtn000 = new ASTSQLInClause(JJTSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IN);

      SQLExpressionList();

   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void GroupByClause() throws ParseException {
 /*@bgen(jjtree) GroupByClause */
  ASTGroupByClause jjtn000 = new ASTGroupByClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      SQLExpressionList();

   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;

    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_10() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(94)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(94)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(K_IN)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SqlGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x400,0x0,0x4000000,0x10000000,0xa100000,0x100000,0x2100000,0x40000000,0x2100000,0x0,0x2100000,0x10000000,0x100000,0x0,0x0,0x83104000,0x0,0x10000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x0,0x7f,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SqlGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SqlGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SqlGrammar(SqlGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SqlGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[103];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 103; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
